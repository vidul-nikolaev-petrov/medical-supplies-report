import { app, BrowserWindow } from "electron";
import log from "electron-log";
import path from "path";
import pjson from "../package.json";

log.transports.file.level = "info";
log.transports.file.file = path.join(__dirname, "log.log");

function isDebug() {
    return process.env.npm_lifecycle_event === "start";
}

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

process.env["ELECTRON_DISABLE_SECURITY_WARNINGS"] = "true";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
    // eslint-disable-line global-require
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.

    const loadWindow = new BrowserWindow({
        height: 80,
        width: 400,
        show: false,
        frame: false,
    });

    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        show: false,
        frame: false,
        webPreferences: {
            contextIsolation: false,
            nodeIntegration: true,
            nodeIntegrationInWorker: true,
            nodeIntegrationInSubFrames: true,
            // webSecurity: false,
        },
    });

    loadWindow.once("show", () => {
        mainWindow.webContents.once("dom-ready", () => {
            setTimeout(() => {
                mainWindow.show();
                loadWindow.hide();
                loadWindow.close();
            }, 1000);
        });
        // long loading html
        mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    });

    if (isDebug()) {
        loadWindow.loadFile(path.join("src", "loading.html"));
    } else {
        loadWindow.loadFile(path.join(pjson.main, "loading.html"));
    }

    loadWindow.show();

    // and load the index.html of the app.
    // mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    // if (isDebug()) {
    mainWindow.webContents.openDevTools();
    // }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit();
    }
});

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
